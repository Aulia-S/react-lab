{"version":3,"sources":["components/js/Card.js","components/js/Form.js","App.js","serviceWorker.js","index.js"],"names":["Card","className","style","maxWidth","this","props","data","title","desc","deadline","type","onClick","update","remove","id","Component","Form","value","autoComplete","htmlFor","placeholder","name","onChange","e","rows","submit","App","state","todos","dataForm","isDataUpdate","todo","key","handleRemove","handleUpdate","handleFormChange","handleFormSubmit","axios","get","then","res","setState","post","delete","put","target","putDataToAPI","Date","getTime","postDataToAPI","deleteDataFromAPI","getDataFromAPI","Fragment","renderForm","map","renderCard","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.af60cbe5.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport class Card extends Component {\n  render() {\n    return (\n      <div className=\"card mb-3 mx-auto\" style={{maxWidth: '540px'}}>\n        <div className=\"row no-gutters\">\n          <div className=\"col-md-8\">\n            <div className=\"card-body\">\n              <h5 className=\"card-title\">{this.props.data.title}</h5>\n              <p className=\"card-text\">{this.props.data.desc}</p>\n              <p className=\"card-text\"><small className=\"text-muted\">{this.props.data.deadline}</small></p>\n            </div>\n          </div>\n          <div className=\"col-md-4\">\n          <div className=\"card-body\">\n              <button type=\"button\" className=\"btn btn-outline-success mr-1\" onClick={() => this.props.update(this.props.data)}>Edit</button>\n              <button type=\"button\" className=\"btn btn-outline-danger\" onClick={() => this.props.remove(this.props.data.id)}>Delete</button>\n          </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Card\n\n","import React, { Component } from 'react';\nimport '../css/Form.css';\n\nclass Form extends Component {\n  render() {\n    const data = this.props.value;\n    return (\n      <form className=\"card mb-3 mx-auto p-2 text-white bg-dark\" style={{maxWidth: '540px'}} autoComplete='off' >\n        <div className=\"form-group\">\n          <label htmlFor=\"exampleFormControlInput1\">Title</label>\n          <input type=\"text\" value={data.title}className=\"form-control\" id=\"exampleFormControlInput1\" placeholder=\"Title here\" name='title' onChange={(e) => this.props.onChange(e)} />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"exampleFormControlTextarea1\">Description</label>\n          <textarea className=\"form-control\" value={data.desc} id=\"exampleFormControlTextarea1\" rows=\"3\" placeholder='Description here' name='desc' onChange={(e) => this.props.onChange(e)}></textarea>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"exampleFormControlInput2\">Deadline</label>\n          <input type=\"datetime-local\" value={data.deadline} className=\"form-control\" id=\"exampleFormControlInput2\" name='deadline' onChange={(e) => this.props.onChange(e)} />\n        </div>\n        <button type=\"submit\" className=\"btn btn-primary ml-auto text-white\" onClick={() => this.props.submit()}>Submit</button>\n      </form>\n    )\n  }\n}\n\nexport default Form;\n","import React from 'react';\nimport './App.css';\nimport Card from './components/js/Card';\nimport axios from 'axios';\nimport Form from './components/js/Form';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state= {\n      todos: [],\n      dataForm: {\n        id: null,\n        title: '',\n        desc: '',\n        deadline: '',\n      },\n      isDataUpdate: false\n    }\n  }\n\n  renderCard(todo){\n    return <Card key={todo.id} data={todo} remove={id => this.handleRemove(id)} update={data => this.handleUpdate(data)}/>\n  }\n\n  renderForm(){\n    return (\n      <Form onChange={(e) => this.handleFormChange(e)} submit={() => this.handleFormSubmit()}  value={this.state.dataForm}/>\n    );\n  }\n\n  getDataFromAPI(){\n    axios.get('http://localhost:3004/todo?_sort=id&_order=desc')\n      .then(res => {\n        let data = [...this.state.todos];\n        data= res.data;\n        this.setState({\n          todos: data\n        });\n      });\n  }\n\n  postDataToAPI(){\n    axios.post('http://localhost:3004/todo', this.state.dataForm);\n  }\n\n  deleteDataFromAPI(id){\n    axios.delete(`http://localhost:3004/todo/${id}`);\n  }\n\n  putDataToAPI(){\n    axios.put(`http://localhost:3004/todo/${this.state.dataForm.id}`, this.state.dataForm)\n        .then(() => {\n          this.setState({isDataUpdate: false});\n        });\n  }\n\n  handleFormChange(e){\n    let dataForm = {...this.state.dataForm};\n    dataForm[e.target.name]= e.target.value;\n    this.setState({\n      dataForm: dataForm\n    });\n  }\n\n  handleFormSubmit(){\n    if(this.state.isDataUpdate){\n      this.putDataToAPI();\n    }else{\n      let dataForm = {...this.state.dataForm};\n      const id= new Date().getTime();\n      dataForm.id = id;\n      this.setState ({\n        dataForm: {\n          id: dataForm.id\n        }\n      });\n      this.postDataToAPI();\n    }\n  }\n\n  handleRemove(id){\n    this.deleteDataFromAPI(id);\n    this.getDataFromAPI();\n  }\n\n  handleUpdate(data){\n    let dataForm= {...this.state.dataForm};\n    dataForm= data;\n    this.setState({\n      dataForm: dataForm,\n      isDataUpdate: true\n    });\n  }\n\n  componentDidMount(){\n    this.getDataFromAPI();\n  }\n\n  render(){\n    return (\n      <React.Fragment>\n        <h1 className='text-center m-4 font-weight-bold app-title'>To Do List</h1>\n        {this.renderForm()}\n        {this.state.todos.map(todo => this.renderCard(todo))}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport 'jquery/dist/jquery.min'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}